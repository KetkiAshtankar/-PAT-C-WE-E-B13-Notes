
---

# 🐍 Python Unit Testing with `unittest`

## 📌 What is Unit Testing?

* **Unit testing** means testing small pieces of code (functions, methods, classes) separately.
* Example: If you have a function `add_numbers(a, b)`, a unit test will check if it works correctly for different inputs.
* Helps catch bugs early and makes your code reliable.

---

## 🛠 What is `unittest`?

* `unittest` is Python’s built-in testing framework (no need to install with pip).
* It provides:

  * **Test case classes** 🧑‍💻
  * **Assertions** (ways to check if code works correctly ✅/❌)
  * **Automatic test discovery**

---

## 📂 File Naming

* Test files should start with `test_` or end with `_test`.
  Example:

  * `test_operations.py` ✅
  * `math_test.py` ✅
  * `operations.py` ❌ (not a test file)

This makes it easy for test runners (like `pytest` or `unittest discover`) to find your test files automatically.

---

## 📝 Example Code

```python
import unittest  # import the testing module

# Code we want to test
def add_numbers(a, b):
    return a + b

# Test Case Class (inherits from unittest.TestCase)
class TestMathOperations(unittest.TestCase):

    # Test method must start with "test_"
    def test_add(self):
        # Check if 2 + 3 = 5
        self.assertEqual(add_numbers(2, 3), 5)
        # Check if -1 + 1 = 0
        self.assertEqual(add_numbers(-1, 1), 0)

# This ensures tests run only when file is executed directly
if __name__ == "__main__":
    unittest.main()
```

---

## 🔑 Why `if __name__ == "__main__":`?

* In Python, every file has a special variable `__name__`.
* If the file is run directly → `__name__ == "__main__"`
* If the file is imported → `__name__` becomes the file name (e.g., `"test_operations"`).

👉 So, this line ensures tests **only run when you execute the file directly**, and not when you import it into another file.

---

## ✅ Common Assertions in `unittest`

| Assertion                         | What it checks           |
| --------------------------------- | ------------------------ |
| `assertEqual(a, b)`               | `a == b`                 |
| `assertNotEqual(a, b)`            | `a != b`                 |
| `assertTrue(x)`                   | `x is True`              |
| `assertFalse(x)`                  | `x is False`             |
| `assertIs(a, b)`                  | `a is b` (same object)   |
| `assertIsNot(a, b)`               | `a is not b`             |
| `assertIsNone(x)`                 | `x is None`              |
| `assertIsNotNone(x)`              | `x is not None`          |
| `assertIn(a, b)`                  | `a in b`                 |
| `assertNotIn(a, b)`               | `a not in b`             |
| `assertRaises(Error, func, args)` | function raises an error |

---

## ▶ Running Tests

Run test file in terminal:

```bash
python -m unittest test_operations.py
```

Or discover all tests in a folder:

```bash
python -m unittest discover
```

---

## 🎯 Key Takeaways

* Always name test files starting with `test_`.
* Test methods inside classes must start with `test_`.
* Use assertions to check results.
* `if __name__ == "__main__": unittest.main()` → ensures tests run only when executed directly.
* Run tests with `python -m unittest` or `python -m unittest discover`.

---

